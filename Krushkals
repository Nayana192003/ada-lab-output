#include <iostream>

int min, cost[100][100], parent[100], i, j, x, y, n;

void find_min();
int check_cycle(int x, int y);

int main() {
    int count = 0, tot = 0, flag = 0;

    std::cout << "Enter the number of vertices" << std::endl;
    std::cin >> n;

    std::cout << "Enter the cost matrix" << std::endl;
    std::cout << "Enter 999 for No edges and self loops" << std::endl;

    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++) {
            std::cin >> cost[i][j];
            parent[j] = 0;
        }

    while (count != n - 1 && min != 999) {
        find_min();
        flag = check_cycle(x, y);

        if (flag == 1) {
            std::cout << "\n" << x << "----->" << y << "==" << cost[x][y] << std::endl;
            count++;
            tot += cost[x][y];
        }

        cost[x][y] = cost[y][x] = 999;
    }

    std::cout << "\nThe total cost of the minimum spanning tree = " << tot << std::endl;

    return 0;
}

void find_min() {
    min = 999;

    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            if (cost[i][j] < min) {
                min = cost[i][j];
                x = i;
                y = j;
            }
}

int check_cycle(int x, int y) {
    if ((parent[x] == parent[y]) && (parent[x] != 0))
        return 0;
    else if (parent[x] == 0 && parent[y] == 0)
        parent[x] = parent[y] = x;
    else if (parent[x] == 0)
        parent[x] = parent[y];
    else if (parent[x] != parent[y])
        parent[y] = parent[x];

    return 1;
}
