#include <iostream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;

#define INF numeric_limits<int>::max()

typedef pair<int, int> pii;

class Graph {
public:
    int V;
    vector<vector<pii>> adjList;

    Graph(int vertices) : V(vertices), adjList(vertices) {}

    void addEdge(int u, int v, int w) {
        adjList[u].emplace_back(v, w);
        adjList[v].emplace_back(u, w);
    }

    vector<int> dijkstra(int start) {
        vector<int> dist(V, INF);
        priority_queue<pii, vector<pii>, greater<pii>> pq;

        dist[start] = 0;
        pq.push({0, start});

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            for (const auto& neighbor : adjList[u]) {
                int v = neighbor.first;
                int weight = neighbor.second;

                if (dist[v] > dist[u] + weight) {
                    dist[v] = dist[u] + weight;
                    pq.push({dist[v], v});
                }
            }
        }

        return dist;
    }
};

int main() {
    int vertices = 5; // Adjust as needed
    Graph graph(vertices);

    // Example edges
    graph.addEdge(0, 1, 2);
    graph.addEdge(0, 2, 4);
    graph.addEdge(1, 2, 1);
    graph.addEdge(1, 3, 7);
    graph.addEdge(2, 4, 3);
    graph.addEdge(3, 4, 1);

    int startNode = 0; // Adjust as needed
    vector<int> shortestDistances = graph.dijkstra(startNode);

    // Display shortest distances from the start node
    cout << "Shortest distances from node " << startNode << ":\n";
    for (int i = 0; i < vertices; ++i) {
        cout << "To node " << i << ": " << shortestDistances[i] << "\n";
    }

    return 0;
}
